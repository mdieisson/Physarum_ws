// Generated by gencpp from file physarum_simulation/ColetaEvent.msg
// DO NOT EDIT!


#ifndef PHYSARUM_SIMULATION_MESSAGE_COLETAEVENT_H
#define PHYSARUM_SIMULATION_MESSAGE_COLETAEVENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace physarum_simulation
{
template <class ContainerAllocator>
struct ColetaEvent_
{
  typedef ColetaEvent_<ContainerAllocator> Type;

  ColetaEvent_()
    : robot_id()
    , x(0.0)
    , y(0.0)
    , action()
    , timestamp(0.0)  {
    }
  ColetaEvent_(const ContainerAllocator& _alloc)
    : robot_id(_alloc)
    , x(0.0)
    , y(0.0)
    , action(_alloc)
    , timestamp(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robot_id_type;
  _robot_id_type robot_id;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _action_type;
  _action_type action;

   typedef double _timestamp_type;
  _timestamp_type timestamp;





  typedef boost::shared_ptr< ::physarum_simulation::ColetaEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::physarum_simulation::ColetaEvent_<ContainerAllocator> const> ConstPtr;

}; // struct ColetaEvent_

typedef ::physarum_simulation::ColetaEvent_<std::allocator<void> > ColetaEvent;

typedef boost::shared_ptr< ::physarum_simulation::ColetaEvent > ColetaEventPtr;
typedef boost::shared_ptr< ::physarum_simulation::ColetaEvent const> ColetaEventConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::physarum_simulation::ColetaEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::physarum_simulation::ColetaEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::physarum_simulation::ColetaEvent_<ContainerAllocator1> & lhs, const ::physarum_simulation::ColetaEvent_<ContainerAllocator2> & rhs)
{
  return lhs.robot_id == rhs.robot_id &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.action == rhs.action &&
    lhs.timestamp == rhs.timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::physarum_simulation::ColetaEvent_<ContainerAllocator1> & lhs, const ::physarum_simulation::ColetaEvent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace physarum_simulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::physarum_simulation::ColetaEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::physarum_simulation::ColetaEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::physarum_simulation::ColetaEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::physarum_simulation::ColetaEvent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::physarum_simulation::ColetaEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::physarum_simulation::ColetaEvent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::physarum_simulation::ColetaEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c4bf146fc488d7abc41d9dcebee68705";
  }

  static const char* value(const ::physarum_simulation::ColetaEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc4bf146fc488d7abULL;
  static const uint64_t static_value2 = 0xc41d9dcebee68705ULL;
};

template<class ContainerAllocator>
struct DataType< ::physarum_simulation::ColetaEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "physarum_simulation/ColetaEvent";
  }

  static const char* value(const ::physarum_simulation::ColetaEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::physarum_simulation::ColetaEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string robot_id\n"
"float32 x\n"
"float32 y\n"
"string action      # \"ocupar\" ou \"liberar\"\n"
"float64 timestamp  # hora do evento\n"
;
  }

  static const char* value(const ::physarum_simulation::ColetaEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::physarum_simulation::ColetaEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.action);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ColetaEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::physarum_simulation::ColetaEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::physarum_simulation::ColetaEvent_<ContainerAllocator>& v)
  {
    s << indent << "robot_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robot_id);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.action);
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PHYSARUM_SIMULATION_MESSAGE_COLETAEVENT_H
