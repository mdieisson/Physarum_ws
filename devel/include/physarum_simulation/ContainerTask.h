// Generated by gencpp from file physarum_simulation/ContainerTask.msg
// DO NOT EDIT!


#ifndef PHYSARUM_SIMULATION_MESSAGE_CONTAINERTASK_H
#define PHYSARUM_SIMULATION_MESSAGE_CONTAINERTASK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace physarum_simulation
{
template <class ContainerAllocator>
struct ContainerTask_
{
  typedef ContainerTask_<ContainerAllocator> Type;

  ContainerTask_()
    : id()
    , x(0.0)
    , y(0.0)
    , coleta_x(0.0)
    , coleta_y(0.0)
    , dest_x(0.0)
    , dest_y(0.0)
    , status()
    , robot_id()
    , timestamp(0.0)  {
    }
  ContainerTask_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , x(0.0)
    , y(0.0)
    , coleta_x(0.0)
    , coleta_y(0.0)
    , dest_x(0.0)
    , dest_y(0.0)
    , status(_alloc)
    , robot_id(_alloc)
    , timestamp(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _coleta_x_type;
  _coleta_x_type coleta_x;

   typedef float _coleta_y_type;
  _coleta_y_type coleta_y;

   typedef float _dest_x_type;
  _dest_x_type dest_x;

   typedef float _dest_y_type;
  _dest_y_type dest_y;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robot_id_type;
  _robot_id_type robot_id;

   typedef double _timestamp_type;
  _timestamp_type timestamp;





  typedef boost::shared_ptr< ::physarum_simulation::ContainerTask_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::physarum_simulation::ContainerTask_<ContainerAllocator> const> ConstPtr;

}; // struct ContainerTask_

typedef ::physarum_simulation::ContainerTask_<std::allocator<void> > ContainerTask;

typedef boost::shared_ptr< ::physarum_simulation::ContainerTask > ContainerTaskPtr;
typedef boost::shared_ptr< ::physarum_simulation::ContainerTask const> ContainerTaskConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::physarum_simulation::ContainerTask_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::physarum_simulation::ContainerTask_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::physarum_simulation::ContainerTask_<ContainerAllocator1> & lhs, const ::physarum_simulation::ContainerTask_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.coleta_x == rhs.coleta_x &&
    lhs.coleta_y == rhs.coleta_y &&
    lhs.dest_x == rhs.dest_x &&
    lhs.dest_y == rhs.dest_y &&
    lhs.status == rhs.status &&
    lhs.robot_id == rhs.robot_id &&
    lhs.timestamp == rhs.timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::physarum_simulation::ContainerTask_<ContainerAllocator1> & lhs, const ::physarum_simulation::ContainerTask_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace physarum_simulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::physarum_simulation::ContainerTask_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::physarum_simulation::ContainerTask_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::physarum_simulation::ContainerTask_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::physarum_simulation::ContainerTask_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::physarum_simulation::ContainerTask_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::physarum_simulation::ContainerTask_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::physarum_simulation::ContainerTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4ac7e3eef6a945017db3fb1512eda31d";
  }

  static const char* value(const ::physarum_simulation::ContainerTask_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4ac7e3eef6a94501ULL;
  static const uint64_t static_value2 = 0x7db3fb1512eda31dULL;
};

template<class ContainerAllocator>
struct DataType< ::physarum_simulation::ContainerTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "physarum_simulation/ContainerTask";
  }

  static const char* value(const ::physarum_simulation::ContainerTask_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::physarum_simulation::ContainerTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"float32 x\n"
"float32 y\n"
"float32 coleta_x     # novo\n"
"float32 coleta_y     # novo\n"
"float32 dest_x\n"
"float32 dest_y\n"
"string status\n"
"string robot_id\n"
"float64 timestamp\n"
;
  }

  static const char* value(const ::physarum_simulation::ContainerTask_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::physarum_simulation::ContainerTask_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.coleta_x);
      stream.next(m.coleta_y);
      stream.next(m.dest_x);
      stream.next(m.dest_y);
      stream.next(m.status);
      stream.next(m.robot_id);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ContainerTask_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::physarum_simulation::ContainerTask_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::physarum_simulation::ContainerTask_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "coleta_x: ";
    Printer<float>::stream(s, indent + "  ", v.coleta_x);
    s << indent << "coleta_y: ";
    Printer<float>::stream(s, indent + "  ", v.coleta_y);
    s << indent << "dest_x: ";
    Printer<float>::stream(s, indent + "  ", v.dest_x);
    s << indent << "dest_y: ";
    Printer<float>::stream(s, indent + "  ", v.dest_y);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.status);
    s << indent << "robot_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robot_id);
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PHYSARUM_SIMULATION_MESSAGE_CONTAINERTASK_H
